knitr::opts_chunk$set(message =  FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(error =  FALSE)
bfcolor <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{\\textbf{%s}}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'><b>%s</b></span>", color, x)
} else x
}
library(tidyverse)
#first we need to get all the individual genres
#genres are like tags so some movies have multiple
#genres
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*")
na.omit(genre_sep)
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre")
knitr::opts_chunk$set(message =  FALSE)
knitr::opts_chunk$set(warning =  FALSE)
knitr::opts_chunk$set(error =  FALSE)
bfcolor <- function(x, color) {
if (knitr::is_latex_output()) {
sprintf("\\textcolor{%s}{\\textbf{%s}}", color, x)
} else if (knitr::is_html_output()) {
sprintf("<span style='color: %s;'><b>%s</b></span>", color, x)
} else x
}
library(dplyr)
dataset <- read.csv("top_1000_popular_movies_tmdb.csv")
dataset <- dataset %>% select(-tagline)
dataset <- dataset %>% select(-X)
dataset <- dataset %>% select(-id)
dataset <- dataset %>% select(-overview)
#since half the data is missing this info we'll include it
revenue_zeros <- sum(dataset$revenue == 0, na.rm = TRUE)
budget_zeros  <- sum(dataset$budget == 0, na.rm = TRUE)
cat("Rows with revenue == 0:", revenue_zeros, "\n")
cat("Rows with budget  == 0:", budget_zeros,  "\n")
#------
#only 175 are missing runtimes though, so they can be purged
runtime_zeros <- sum(dataset$runtime == 0, na.rm = TRUE)
cat("Rows with runtime == 0:", runtime_zeros, "\n")
#------
#the dataset to be manipulated from here on out!
dataset <- dataset[!(dataset$runtime == 0), ]
dataset %>%
summary()
library(ggplot2)
ggplot(dataset, aes(x=vote_average)) +
geom_histogram(bins=50, fill="maroon", color="black")+
labs(title="Histogram of Vote Averages",
x="Score",
y="Frequency")
library(tidyverse)
#first we need to get all the individual genres
#genres are like tags so some movies have multiple
#genres
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*")
na.omit(genre_sep)
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre")
dataset
library(corrplot)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point() +
labs
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point() +
labs
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point()
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.5)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=1)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.1)
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre") +
theme(legend.position = "none")
genre_sep
na.omit(genre_sep$genres)
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*")
genre_sep <- na.omit(genre_sep$genres)
genre_sep
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre") +
theme(legend.position = "none")
genre_sep
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*")
genre_sep <- na.omit(genre_sep)
genre_sep
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre") +
theme(legend.position = "none")
genre_sep$genres[genre_sep$genres == ""]
which(genre_sep$genres[genre_sep$genres == ""])
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*") %>%
filter(genres != "")
genre_sep <- na.omit(genre_sep)
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre") +
theme(legend.position = "none")
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*") %>%
filter(genres != "") %>%
group_by(median(vote_average))
genre_sep <- na.omit(genre_sep)
genre_sep
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre") +
theme(legend.position = "none")
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*") %>%
filter(genres != "") %>%
group_by(median(vote_average))
genre_sep <- na.omit(genre_sep)
genre_sep <- genre_sep %>%
mutate(genres = fct_reorder(genres, vote_average, .fun = median, .desc = FALSE))
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre") +
theme(legend.position = "none")
library(tidyverse)
#first we need to get all the individual genres
#genres are like tags so some movies have multiple
#genres
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*") %>%
filter(genres != "") %>%
group_by(median(vote_average))
genre_sep <- na.omit(genre_sep)
genre_sep <- genre_sep %>%
mutate(genres = fct_reorder(genres, vote_average, .fun = median, .desc = TRUE))
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Vote Average by Genre",
x="Score",
y="Genre") +
theme(legend.position = "none")
dataset
library(corrplot)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.01)
buget_vote <- matrix()
corrplot::corrplot(cor(dataset$vote_average, dataset$budget), method="circle")
dataset
library(corrplot)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.01)
dataset
library(corrplot)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.05)
dataset
library(corrplot)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.05) +
labs(title="Vote Average vs. Movie Budget",
x="Movie Budget",
y="Vote Average")
dataset
library(corrplot)
ggplot(dataset, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.05) +
labs(title="Vote Average vs. Movie Budget",
x="Vote Average",
y="Budget (Millions)")
summary(dataset$vote_average)
library(ggplot2)
ggplot(dataset, aes(x=vote_average)) +
geom_histogram(bins=50, fill="maroon", color="black")+
labs(title="Histogram of Vote Averages",
x="Average Rating",
y="Frequency")
#first we need to get all the individual genres
#genres are like tags so some movies have multiple
#genres
dataset$vote_average[dataset$vote_average == 0]
#first we need to get all the individual genres
#genres are like tags so some movies have multiple
#genres
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*") %>%
filter(genres != "", vote_average == 0) %>%
group_by(median(vote_average))
#for some reason, only 2 rows in the seperated dataset were NA
genre_sep <- na.omit(genre_sep)
#want to reorder so that we can can easier tell the smallest to largest median values
genre_sep <- genre_sep %>%
mutate(genres = fct_reorder(genres, vote_average, .fun = median, .desc = TRUE))
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Average Rating by Genre",
x="Average Rating",
y="Genre") +
theme(legend.position = "none")
#first we need to get all the individual genres
#genres are like tags so some movies have multiple
#genres (also removed vote avg of 0 as discussed before)
genre_sep <- dataset %>%
mutate(genres = str_remove_all(genres, "\\[|\\]|'")) %>%
separate_rows(genres, sep=",\\s*") %>%
filter(genres != "", vote_average != 0) %>%
group_by(median(vote_average))
#for some reason, only 2 rows in the seperated dataset were NA
genre_sep <- na.omit(genre_sep)
#want to reorder so that we can can easier tell the smallest to largest median values
genre_sep <- genre_sep %>%
mutate(genres = fct_reorder(genres, vote_average, .fun = median, .desc = TRUE))
ggplot(genre_sep, aes(x=vote_average, y=genres, fill = genres)) +
geom_boxplot() +
labs(title="Boxplots for Average Rating by Genre",
x="Average Rating",
y="Genre") +
theme(legend.position = "none")
##filter vote avg of 0 out
data_wo_zeros <- dataset %>%
filter(vote_average != 0)
ggplot(data_wo_zeros, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.05) +
labs(title="Average Rating vs. Movie Budget",
x="Average Rating",
y="Budget (Millions)")
##filter vote avg of 0 out
data_wo_zeros <- dataset %>%
filter(vote_average != 0)
ggplot(data_wo_zeros, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.075) +
labs(title="Average Rating vs. Movie Budget",
x="Average Rating",
y="Budget (Millions)")
dataset$budget[dataset$budget == 0]
#| echo: false
##filter vote avg of 0 out
data_wo_zeros <- dataset %>%
filter(vote_average != 0, budget != 0)
#| echo: false
##filter vote avg of 0 out
data_wo_zeros <- dataset %>%
filter(vote_average != 0, budget != 0)
ggplot(data_wo_zeros, aes(x=vote_average, y=budget/(1000000))) +
geom_point(alpha=0.075) +
labs(title="Average Rating vs. Movie Budget",
x="Average Rating",
y="Budget (Millions)")
